{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/a/nft-marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _createForOfIteratorHelper = require(\"C:/a/nft-marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _objectSpread = require(\"C:/a/nft-marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _awaitAsyncGenerator = require(\"C:/a/nft-marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\");\n\nvar _wrapAsyncGenerator = require(\"C:/a/nft-marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\");\n\nvar _asyncIterator = require(\"C:/a/nft-marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncIterator\");\n\nvar _require = require('multiformats/cid'),\n    CID = _require.CID;\n\nvar configure = require('../lib/configure');\n\nvar normaliseInput = require('ipfs-core-utils/src/pins/normalise-input');\n\nvar toUrlSearchParams = require('../lib/to-url-search-params');\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pin').API<HTTPClientExtraOptions>} PinAPI\n */\n\n\nmodule.exports = configure(function (api) {\n  /**\n   * @type {PinAPI[\"addAll\"]}\n   */\n  function addAll(_x) {\n    return _addAll.apply(this, arguments);\n  }\n\n  function _addAll() {\n    _addAll = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(source) {\n      var options,\n          _iteratorAbruptCompletion,\n          _didIteratorError,\n          _iteratorError,\n          _iterator,\n          _step,\n          _step$value,\n          path,\n          recursive,\n          metadata,\n          res,\n          _iteratorAbruptCompletion2,\n          _didIteratorError2,\n          _iteratorError2,\n          _iterator2,\n          _step2,\n          pin,\n          _iterator3,\n          _step3,\n          cid,\n          _args = arguments;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n              _iteratorAbruptCompletion = false;\n              _didIteratorError = false;\n              _context.prev = 3;\n              _iterator = _asyncIterator(normaliseInput(source));\n\n            case 5:\n              _context.next = 7;\n              return _awaitAsyncGenerator(_iterator.next());\n\n            case 7:\n              if (!(_iteratorAbruptCompletion = !(_step = _context.sent).done)) {\n                _context.next = 63;\n                break;\n              }\n\n              _step$value = _step.value, path = _step$value.path, recursive = _step$value.recursive, metadata = _step$value.metadata;\n              _context.next = 11;\n              return _awaitAsyncGenerator(api.post('pin/add', {\n                timeout: options.timeout,\n                signal: options.signal,\n                searchParams: toUrlSearchParams(_objectSpread(_objectSpread({}, options), {}, {\n                  arg: path,\n                  recursive: recursive,\n                  metadata: metadata ? JSON.stringify(metadata) : undefined,\n                  stream: true\n                })),\n                headers: options.headers\n              }));\n\n            case 11:\n              res = _context.sent;\n              _iteratorAbruptCompletion2 = false;\n              _didIteratorError2 = false;\n              _context.prev = 14;\n              _iterator2 = _asyncIterator(res.ndjson());\n\n            case 16:\n              _context.next = 18;\n              return _awaitAsyncGenerator(_iterator2.next());\n\n            case 18:\n              if (!(_iteratorAbruptCompletion2 = !(_step2 = _context.sent).done)) {\n                _context.next = 44;\n                break;\n              }\n\n              pin = _step2.value;\n\n              if (!pin.Pins) {\n                _context.next = 39;\n                break;\n              }\n\n              // non-streaming response\n              _iterator3 = _createForOfIteratorHelper(pin.Pins);\n              _context.prev = 22;\n\n              _iterator3.s();\n\n            case 24:\n              if ((_step3 = _iterator3.n()).done) {\n                _context.next = 30;\n                break;\n              }\n\n              cid = _step3.value;\n              _context.next = 28;\n              return CID.parse(cid);\n\n            case 28:\n              _context.next = 24;\n              break;\n\n            case 30:\n              _context.next = 35;\n              break;\n\n            case 32:\n              _context.prev = 32;\n              _context.t0 = _context[\"catch\"](22);\n\n              _iterator3.e(_context.t0);\n\n            case 35:\n              _context.prev = 35;\n\n              _iterator3.f();\n\n              return _context.finish(35);\n\n            case 38:\n              return _context.abrupt(\"continue\", 41);\n\n            case 39:\n              _context.next = 41;\n              return CID.parse(pin);\n\n            case 41:\n              _iteratorAbruptCompletion2 = false;\n              _context.next = 16;\n              break;\n\n            case 44:\n              _context.next = 50;\n              break;\n\n            case 46:\n              _context.prev = 46;\n              _context.t1 = _context[\"catch\"](14);\n              _didIteratorError2 = true;\n              _iteratorError2 = _context.t1;\n\n            case 50:\n              _context.prev = 50;\n              _context.prev = 51;\n\n              if (!(_iteratorAbruptCompletion2 && _iterator2.return != null)) {\n                _context.next = 55;\n                break;\n              }\n\n              _context.next = 55;\n              return _awaitAsyncGenerator(_iterator2.return());\n\n            case 55:\n              _context.prev = 55;\n\n              if (!_didIteratorError2) {\n                _context.next = 58;\n                break;\n              }\n\n              throw _iteratorError2;\n\n            case 58:\n              return _context.finish(55);\n\n            case 59:\n              return _context.finish(50);\n\n            case 60:\n              _iteratorAbruptCompletion = false;\n              _context.next = 5;\n              break;\n\n            case 63:\n              _context.next = 69;\n              break;\n\n            case 65:\n              _context.prev = 65;\n              _context.t2 = _context[\"catch\"](3);\n              _didIteratorError = true;\n              _iteratorError = _context.t2;\n\n            case 69:\n              _context.prev = 69;\n              _context.prev = 70;\n\n              if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n                _context.next = 74;\n                break;\n              }\n\n              _context.next = 74;\n              return _awaitAsyncGenerator(_iterator.return());\n\n            case 74:\n              _context.prev = 74;\n\n              if (!_didIteratorError) {\n                _context.next = 77;\n                break;\n              }\n\n              throw _iteratorError;\n\n            case 77:\n              return _context.finish(74);\n\n            case 78:\n              return _context.finish(69);\n\n            case 79:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[3, 65, 69, 79], [14, 46, 50, 60], [22, 32, 35, 38], [51,, 55, 59], [70,, 74, 78]]);\n    }));\n    return _addAll.apply(this, arguments);\n  }\n\n  return addAll;\n});","map":{"version":3,"sources":["C:/a/nft-marketplace/node_modules/ipfs-http-client/src/pin/add-all.js"],"names":["require","CID","configure","normaliseInput","toUrlSearchParams","module","exports","api","addAll","source","options","path","recursive","metadata","post","timeout","signal","searchParams","arg","JSON","stringify","undefined","stream","headers","res","ndjson","pin","Pins","cid","parse"],"mappings":"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","sourcesContent":["'use strict'\n\nconst { CID } = require('multiformats/cid')\nconst configure = require('../lib/configure')\nconst normaliseInput = require('ipfs-core-utils/src/pins/normalise-input')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pin').API<HTTPClientExtraOptions>} PinAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {PinAPI[\"addAll\"]}\n   */\n  async function * addAll (source, options = {}) {\n    for await (const { path, recursive, metadata } of normaliseInput(source)) {\n      const res = await api.post('pin/add', {\n        timeout: options.timeout,\n        signal: options.signal,\n        searchParams: toUrlSearchParams({\n          ...options,\n          arg: path,\n          recursive,\n          metadata: metadata ? JSON.stringify(metadata) : undefined,\n          stream: true\n        }),\n        headers: options.headers\n      })\n\n      for await (const pin of res.ndjson()) {\n        if (pin.Pins) { // non-streaming response\n          for (const cid of pin.Pins) {\n            yield CID.parse(cid)\n          }\n          continue\n        }\n\n        yield CID.parse(pin)\n      }\n    }\n  }\n  return addAll\n})\n"]},"metadata":{},"sourceType":"script"}