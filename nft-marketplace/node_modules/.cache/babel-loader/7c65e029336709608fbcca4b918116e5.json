{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/a/nft-marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _createForOfIteratorHelper = require(\"C:/a/nft-marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _awaitAsyncGenerator = require(\"C:/a/nft-marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\");\n\nvar _wrapAsyncGenerator = require(\"C:/a/nft-marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\");\n\nvar _asyncIterator = require(\"C:/a/nft-marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncIterator\");\n\nvar errCode = require('err-code');\n\nvar _require = require('multiformats/cid'),\n    CID = _require.CID;\n/**\n * @typedef {Object} Pinnable\n * @property {string | InstanceType<typeof window.String> | CID} [path]\n * @property {CID} [cid]\n * @property {boolean} [recursive]\n * @property {any} [metadata]\n *\n * @typedef {CID|string|InstanceType<typeof window.String>|Pinnable} ToPin\n * @typedef {ToPin|Iterable<ToPin>|AsyncIterable<ToPin>} Source\n *\n * @typedef {Object} Pin\n * @property {string|CID} path\n * @property {boolean} recursive\n * @property {any} [metadata]\n */\n\n/**\n * Transform one of:\n *\n * ```ts\n * CID\n * String\n * { cid: CID recursive, metadata }\n * { path: String recursive, metadata }\n * Iterable<CID>\n * Iterable<String>\n * Iterable<{ cid: CID recursive, metadata }>\n * Iterable<{ path: String recursive, metadata }>\n * AsyncIterable<CID>\n * AsyncIterable<String>\n * AsyncIterable<{ cid: CID recursive, metadata }>\n * AsyncIterable<{ path: String recursive, metadata }>\n * ```\n * Into:\n *\n * ```ts\n * AsyncIterable<{ path: CID|String, recursive:boolean, metadata }>\n * ```\n *\n * @param {Source} input\n * @returns {AsyncIterable<Pin>}\n */\n// eslint-disable-next-line complexity\n\n\nmodule.exports = /*#__PURE__*/function () {\n  var _normaliseInput = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(input) {\n    var iterator, first, _iterator3, _step3, cid, _iterator4, _step4, obj, _iterator5, _first, _iteratorAbruptCompletion, _didIteratorError, _iteratorError, _iterator, _step, _cid, _iteratorAbruptCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, _obj;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(input === null || input === undefined)) {\n              _context.next = 2;\n              break;\n            }\n\n            throw errCode(new Error(\"Unexpected input: \".concat(input)), 'ERR_UNEXPECTED_INPUT');\n\n          case 2:\n            if (!(input instanceof CID)) {\n              _context.next = 6;\n              break;\n            }\n\n            _context.next = 5;\n            return toPin({\n              cid: input\n            });\n\n          case 5:\n            return _context.abrupt(\"return\");\n\n          case 6:\n            if (!(input instanceof String || typeof input === 'string')) {\n              _context.next = 10;\n              break;\n            }\n\n            _context.next = 9;\n            return toPin({\n              path: input\n            });\n\n          case 9:\n            return _context.abrupt(\"return\");\n\n          case 10:\n            if (!(input.cid != null || input.path != null)) {\n              _context.next = 14;\n              break;\n            }\n\n            _context.next = 13;\n            return toPin(input);\n\n          case 13:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 14:\n            if (!(Symbol.iterator in input)) {\n              _context.next = 62;\n              break;\n            }\n\n            // @ts-ignore\n            iterator = input[Symbol.iterator]();\n            first = iterator.next();\n\n            if (!first.done) {\n              _context.next = 19;\n              break;\n            }\n\n            return _context.abrupt(\"return\", iterator);\n\n          case 19:\n            if (!(first.value instanceof CID || first.value instanceof String || typeof first.value === 'string')) {\n              _context.next = 40;\n              break;\n            }\n\n            _context.next = 22;\n            return toPin({\n              cid: first.value\n            });\n\n          case 22:\n            _iterator3 = _createForOfIteratorHelper(iterator);\n            _context.prev = 23;\n\n            _iterator3.s();\n\n          case 25:\n            if ((_step3 = _iterator3.n()).done) {\n              _context.next = 31;\n              break;\n            }\n\n            cid = _step3.value;\n            _context.next = 29;\n            return toPin({\n              cid: cid\n            });\n\n          case 29:\n            _context.next = 25;\n            break;\n\n          case 31:\n            _context.next = 36;\n            break;\n\n          case 33:\n            _context.prev = 33;\n            _context.t0 = _context[\"catch\"](23);\n\n            _iterator3.e(_context.t0);\n\n          case 36:\n            _context.prev = 36;\n\n            _iterator3.f();\n\n            return _context.finish(36);\n\n          case 39:\n            return _context.abrupt(\"return\");\n\n          case 40:\n            if (!(first.value.cid != null || first.value.path != null)) {\n              _context.next = 61;\n              break;\n            }\n\n            _context.next = 43;\n            return toPin(first.value);\n\n          case 43:\n            _iterator4 = _createForOfIteratorHelper(iterator);\n            _context.prev = 44;\n\n            _iterator4.s();\n\n          case 46:\n            if ((_step4 = _iterator4.n()).done) {\n              _context.next = 52;\n              break;\n            }\n\n            obj = _step4.value;\n            _context.next = 50;\n            return toPin(obj);\n\n          case 50:\n            _context.next = 46;\n            break;\n\n          case 52:\n            _context.next = 57;\n            break;\n\n          case 54:\n            _context.prev = 54;\n            _context.t1 = _context[\"catch\"](44);\n\n            _iterator4.e(_context.t1);\n\n          case 57:\n            _context.prev = 57;\n\n            _iterator4.f();\n\n            return _context.finish(57);\n\n          case 60:\n            return _context.abrupt(\"return\");\n\n          case 61:\n            throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT');\n\n          case 62:\n            if (!(Symbol.asyncIterator in input)) {\n              _context.next = 136;\n              break;\n            }\n\n            // @ts-ignore\n            _iterator5 = input[Symbol.asyncIterator]();\n            _context.next = 66;\n            return _awaitAsyncGenerator(_iterator5.next());\n\n          case 66:\n            _first = _context.sent;\n\n            if (!_first.done) {\n              _context.next = 69;\n              break;\n            }\n\n            return _context.abrupt(\"return\", _iterator5);\n\n          case 69:\n            if (!(_first.value instanceof CID || _first.value instanceof String || typeof _first.value === 'string')) {\n              _context.next = 102;\n              break;\n            }\n\n            _context.next = 72;\n            return toPin({\n              cid: _first.value\n            });\n\n          case 72:\n            _iteratorAbruptCompletion = false;\n            _didIteratorError = false;\n            _context.prev = 74;\n            _iterator = _asyncIterator(_iterator5);\n\n          case 76:\n            _context.next = 78;\n            return _awaitAsyncGenerator(_iterator.next());\n\n          case 78:\n            if (!(_iteratorAbruptCompletion = !(_step = _context.sent).done)) {\n              _context.next = 85;\n              break;\n            }\n\n            _cid = _step.value;\n            _context.next = 82;\n            return toPin({\n              cid: _cid\n            });\n\n          case 82:\n            _iteratorAbruptCompletion = false;\n            _context.next = 76;\n            break;\n\n          case 85:\n            _context.next = 91;\n            break;\n\n          case 87:\n            _context.prev = 87;\n            _context.t2 = _context[\"catch\"](74);\n            _didIteratorError = true;\n            _iteratorError = _context.t2;\n\n          case 91:\n            _context.prev = 91;\n            _context.prev = 92;\n\n            if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n              _context.next = 96;\n              break;\n            }\n\n            _context.next = 96;\n            return _awaitAsyncGenerator(_iterator.return());\n\n          case 96:\n            _context.prev = 96;\n\n            if (!_didIteratorError) {\n              _context.next = 99;\n              break;\n            }\n\n            throw _iteratorError;\n\n          case 99:\n            return _context.finish(96);\n\n          case 100:\n            return _context.finish(91);\n\n          case 101:\n            return _context.abrupt(\"return\");\n\n          case 102:\n            if (!(_first.value.cid != null || _first.value.path != null)) {\n              _context.next = 135;\n              break;\n            }\n\n            _context.next = 105;\n            return toPin(_first.value);\n\n          case 105:\n            _iteratorAbruptCompletion2 = false;\n            _didIteratorError2 = false;\n            _context.prev = 107;\n            _iterator2 = _asyncIterator(_iterator5);\n\n          case 109:\n            _context.next = 111;\n            return _awaitAsyncGenerator(_iterator2.next());\n\n          case 111:\n            if (!(_iteratorAbruptCompletion2 = !(_step2 = _context.sent).done)) {\n              _context.next = 118;\n              break;\n            }\n\n            _obj = _step2.value;\n            _context.next = 115;\n            return toPin(_obj);\n\n          case 115:\n            _iteratorAbruptCompletion2 = false;\n            _context.next = 109;\n            break;\n\n          case 118:\n            _context.next = 124;\n            break;\n\n          case 120:\n            _context.prev = 120;\n            _context.t3 = _context[\"catch\"](107);\n            _didIteratorError2 = true;\n            _iteratorError2 = _context.t3;\n\n          case 124:\n            _context.prev = 124;\n            _context.prev = 125;\n\n            if (!(_iteratorAbruptCompletion2 && _iterator2.return != null)) {\n              _context.next = 129;\n              break;\n            }\n\n            _context.next = 129;\n            return _awaitAsyncGenerator(_iterator2.return());\n\n          case 129:\n            _context.prev = 129;\n\n            if (!_didIteratorError2) {\n              _context.next = 132;\n              break;\n            }\n\n            throw _iteratorError2;\n\n          case 132:\n            return _context.finish(129);\n\n          case 133:\n            return _context.finish(124);\n\n          case 134:\n            return _context.abrupt(\"return\");\n\n          case 135:\n            throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT');\n\n          case 136:\n            throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT');\n\n          case 137:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[23, 33, 36, 39], [44, 54, 57, 60], [74, 87, 91, 101], [92,, 96, 100], [107, 120, 124, 134], [125,, 129, 133]]);\n  }));\n\n  function normaliseInput(_x) {\n    return _normaliseInput.apply(this, arguments);\n  }\n\n  return normaliseInput;\n}();\n/**\n * @param {Pinnable} input\n */\n\n\nfunction toPin(input) {\n  var path = input.cid || \"\".concat(input.path);\n\n  if (!path) {\n    throw errCode(new Error('Unexpected input: Please path either a CID or an IPFS path'), 'ERR_UNEXPECTED_INPUT');\n  }\n  /** @type {Pin} */\n\n\n  var pin = {\n    path: path,\n    recursive: input.recursive !== false\n  };\n\n  if (input.metadata != null) {\n    pin.metadata = input.metadata;\n  }\n\n  return pin;\n}","map":{"version":3,"sources":["C:/a/nft-marketplace/node_modules/ipfs-core-utils/src/pins/normalise-input.js"],"names":["errCode","require","CID","module","exports","input","undefined","Error","toPin","cid","String","path","Symbol","iterator","first","next","done","value","obj","asyncIterator","normaliseInput","pin","recursive","metadata"],"mappings":"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","sourcesContent":["'use strict'\n\nconst errCode = require('err-code')\nconst { CID } = require('multiformats/cid')\n\n/**\n * @typedef {Object} Pinnable\n * @property {string | InstanceType<typeof window.String> | CID} [path]\n * @property {CID} [cid]\n * @property {boolean} [recursive]\n * @property {any} [metadata]\n *\n * @typedef {CID|string|InstanceType<typeof window.String>|Pinnable} ToPin\n * @typedef {ToPin|Iterable<ToPin>|AsyncIterable<ToPin>} Source\n *\n * @typedef {Object} Pin\n * @property {string|CID} path\n * @property {boolean} recursive\n * @property {any} [metadata]\n */\n\n/**\n * Transform one of:\n *\n * ```ts\n * CID\n * String\n * { cid: CID recursive, metadata }\n * { path: String recursive, metadata }\n * Iterable<CID>\n * Iterable<String>\n * Iterable<{ cid: CID recursive, metadata }>\n * Iterable<{ path: String recursive, metadata }>\n * AsyncIterable<CID>\n * AsyncIterable<String>\n * AsyncIterable<{ cid: CID recursive, metadata }>\n * AsyncIterable<{ path: String recursive, metadata }>\n * ```\n * Into:\n *\n * ```ts\n * AsyncIterable<{ path: CID|String, recursive:boolean, metadata }>\n * ```\n *\n * @param {Source} input\n * @returns {AsyncIterable<Pin>}\n */\n// eslint-disable-next-line complexity\nmodule.exports = async function * normaliseInput (input) {\n  // must give us something\n  if (input === null || input === undefined) {\n    throw errCode(new Error(`Unexpected input: ${input}`), 'ERR_UNEXPECTED_INPUT')\n  }\n\n  // CID\n  if (input instanceof CID) {\n    yield toPin({ cid: input })\n    return\n  }\n\n  if (input instanceof String || typeof input === 'string') {\n    yield toPin({ path: input })\n    return\n  }\n\n  // { cid: CID recursive, metadata }\n  // @ts-ignore - it still could be iterable or async iterable\n  if (input.cid != null || input.path != null) {\n    // @ts-ignore\n    return yield toPin(input)\n  }\n\n  // Iterable<?>\n  if (Symbol.iterator in input) {\n    // @ts-ignore\n    const iterator = input[Symbol.iterator]()\n    const first = iterator.next()\n    if (first.done) return iterator\n\n    // Iterable<CID|String>\n    if (first.value instanceof CID || first.value instanceof String || typeof first.value === 'string') {\n      yield toPin({ cid: first.value })\n      for (const cid of iterator) {\n        yield toPin({ cid })\n      }\n      return\n    }\n\n    // Iterable<{ cid: CID recursive, metadata }>\n    if (first.value.cid != null || first.value.path != null) {\n      yield toPin(first.value)\n      for (const obj of iterator) {\n        yield toPin(obj)\n      }\n      return\n    }\n\n    throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT')\n  }\n\n  // AsyncIterable<?>\n  if (Symbol.asyncIterator in input) {\n    // @ts-ignore\n    const iterator = input[Symbol.asyncIterator]()\n    const first = await iterator.next()\n    if (first.done) return iterator\n\n    // AsyncIterable<CID|String>\n    if (first.value instanceof CID || first.value instanceof String || typeof first.value === 'string') {\n      yield toPin({ cid: first.value })\n      for await (const cid of iterator) {\n        yield toPin({ cid })\n      }\n      return\n    }\n\n    // AsyncIterable<{ cid: CID|String recursive, metadata }>\n    if (first.value.cid != null || first.value.path != null) {\n      yield toPin(first.value)\n      for await (const obj of iterator) {\n        yield toPin(obj)\n      }\n      return\n    }\n\n    throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT')\n  }\n\n  throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT')\n}\n\n/**\n * @param {Pinnable} input\n */\nfunction toPin (input) {\n  const path = input.cid || `${input.path}`\n\n  if (!path) {\n    throw errCode(new Error('Unexpected input: Please path either a CID or an IPFS path'), 'ERR_UNEXPECTED_INPUT')\n  }\n\n  /** @type {Pin} */\n  const pin = {\n    path,\n    recursive: input.recursive !== false\n  }\n\n  if (input.metadata != null) {\n    pin.metadata = input.metadata\n  }\n\n  return pin\n}\n"]},"metadata":{},"sourceType":"script"}