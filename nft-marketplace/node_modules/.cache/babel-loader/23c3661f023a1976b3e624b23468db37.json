{"ast":null,"code":"'use strict';\n/* eslint-env browser */\n\nvar _require = require('multiformats/cid'),\n    CID = _require.CID;\n\nvar _require2 = require('multiaddr'),\n    multiaddr = _require2.multiaddr;\n\nvar globSource = require('ipfs-utils/src/files/glob-source');\n\nvar urlSource = require('ipfs-utils/src/files/url-source');\n\nvar Multicodecs = require('ipfs-core-utils/src/multicodecs');\n\nvar Multihashes = require('ipfs-core-utils/src/multihashes');\n\nvar Multibases = require('ipfs-core-utils/src/multibases');\n\nvar dagPb = require('@ipld/dag-pb');\n\nvar dagCbor = require('@ipld/dag-cbor');\n\nvar raw = require('multiformats/codecs/raw');\n\nvar json = require('multiformats/codecs/json');\n\nvar _require3 = require('multiformats/hashes/sha2'),\n    sha256 = _require3.sha256,\n    sha512 = _require3.sha512;\n\nvar _require4 = require('multiformats/hashes/identity'),\n    identity = _require4.identity;\n\nvar _require5 = require('multiformats/bases/base58'),\n    base58btc = _require5.base58btc;\n/**\n * @typedef {import('./types').EndpointConfig} EndpointConfig\n * @typedef {import('./types').Options} Options\n * @typedef {import('multiformats/codecs/interface').BlockCodec<any, any>} BlockCodec\n * @typedef {import('./types').IPFSHTTPClient} IPFSHTTPClient\n */\n\n/**\n * @param {Options} options\n */\n\n\nfunction create() {\n  var _options$ipld;\n\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  /**\n   * @type {BlockCodec}\n   */\n  var id = {\n    name: identity.name,\n    code: identity.code,\n    encode: function encode(id) {\n      return id;\n    },\n    decode: function decode(id) {\n      return id;\n    }\n  };\n  var bases = new Multibases({\n    bases: [base58btc].concat(options.ipld && options.ipld.bases ? options.ipld.bases : []),\n    loadBase: options.ipld && options.ipld.loadBase\n  });\n  var codecs = new Multicodecs({\n    codecs: [dagPb, dagCbor, raw, json, id].concat(((_options$ipld = options.ipld) === null || _options$ipld === void 0 ? void 0 : _options$ipld.codecs) || []),\n    loadCodec: options.ipld && options.ipld.loadCodec\n  });\n  var hashers = new Multihashes({\n    hashers: [sha256, sha512, identity].concat(options.ipld && options.ipld.hashers ? options.ipld.hashers : []),\n    loadHasher: options.ipld && options.ipld.loadHasher\n  });\n  /** @type {IPFSHTTPClient} */\n\n  var client = {\n    add: require('./add')(options),\n    addAll: require('./add-all')(options),\n    bitswap: require('./bitswap')(options),\n    block: require('./block')(options),\n    bootstrap: require('./bootstrap')(options),\n    cat: require('./cat')(options),\n    commands: require('./commands')(options),\n    config: require('./config')(options),\n    dag: require('./dag')(codecs, options),\n    dht: require('./dht')(options),\n    diag: require('./diag')(options),\n    dns: require('./dns')(options),\n    files: require('./files')(options),\n    get: require('./get')(options),\n    getEndpointConfig: require('./get-endpoint-config')(options),\n    id: require('./id')(options),\n    isOnline: require('./is-online')(options),\n    key: require('./key')(options),\n    log: require('./log')(options),\n    ls: require('./ls')(options),\n    mount: require('./mount')(options),\n    name: require('./name')(options),\n    object: require('./object')(codecs, options),\n    pin: require('./pin')(options),\n    ping: require('./ping')(options),\n    pubsub: require('./pubsub')(options),\n    refs: require('./refs')(options),\n    repo: require('./repo')(options),\n    resolve: require('./resolve')(options),\n    start: require('./start')(options),\n    stats: require('./stats')(options),\n    stop: require('./stop')(options),\n    swarm: require('./swarm')(options),\n    version: require('./version')(options),\n    bases: bases,\n    codecs: codecs,\n    hashers: hashers\n  };\n  return client;\n}\n\nmodule.exports = {\n  create: create,\n  CID: CID,\n  multiaddr: multiaddr,\n  globSource: globSource,\n  urlSource: urlSource\n};","map":{"version":3,"sources":["C:/a/nft-marketplace/node_modules/ipfs-http-client/src/index.js"],"names":["require","CID","multiaddr","globSource","urlSource","Multicodecs","Multihashes","Multibases","dagPb","dagCbor","raw","json","sha256","sha512","identity","base58btc","create","options","id","name","code","encode","decode","bases","concat","ipld","loadBase","codecs","loadCodec","hashers","loadHasher","client","add","addAll","bitswap","block","bootstrap","cat","commands","config","dag","dht","diag","dns","files","get","getEndpointConfig","isOnline","key","log","ls","mount","object","pin","ping","pubsub","refs","repo","resolve","start","stats","stop","swarm","version","module","exports"],"mappings":"AAAA;AACA;;AAEA,eAAgBA,OAAO,CAAC,kBAAD,CAAvB;AAAA,IAAQC,GAAR,YAAQA,GAAR;;AACA,gBAAsBD,OAAO,CAAC,WAAD,CAA7B;AAAA,IAAQE,SAAR,aAAQA,SAAR;;AACA,IAAMC,UAAU,GAAGH,OAAO,CAAC,kCAAD,CAA1B;;AACA,IAAMI,SAAS,GAAGJ,OAAO,CAAC,iCAAD,CAAzB;;AACA,IAAMK,WAAW,GAAGL,OAAO,CAAC,iCAAD,CAA3B;;AACA,IAAMM,WAAW,GAAGN,OAAO,CAAC,iCAAD,CAA3B;;AACA,IAAMO,UAAU,GAAGP,OAAO,CAAC,gCAAD,CAA1B;;AACA,IAAMQ,KAAK,GAAGR,OAAO,CAAC,cAAD,CAArB;;AACA,IAAMS,OAAO,GAAGT,OAAO,CAAC,gBAAD,CAAvB;;AACA,IAAMU,GAAG,GAAGV,OAAO,CAAC,yBAAD,CAAnB;;AACA,IAAMW,IAAI,GAAGX,OAAO,CAAC,0BAAD,CAApB;;AACA,gBAA2BA,OAAO,CAAC,0BAAD,CAAlC;AAAA,IAAQY,MAAR,aAAQA,MAAR;AAAA,IAAgBC,MAAhB,aAAgBA,MAAhB;;AACA,gBAAqBb,OAAO,CAAC,8BAAD,CAA5B;AAAA,IAAQc,QAAR,aAAQA,QAAR;;AACA,gBAAsBd,OAAO,CAAC,2BAAD,CAA7B;AAAA,IAAQe,SAAR,aAAQA,SAAR;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AACA,SAASC,MAAT,GAA+B;AAAA;;AAAA,MAAdC,OAAc,uEAAJ,EAAI;;AAC7B;AACF;AACA;AACE,MAAMC,EAAE,GAAG;AACTC,IAAAA,IAAI,EAAEL,QAAQ,CAACK,IADN;AAETC,IAAAA,IAAI,EAAEN,QAAQ,CAACM,IAFN;AAGTC,IAAAA,MAAM,EAAE,gBAACH,EAAD;AAAA,aAAQA,EAAR;AAAA,KAHC;AAITI,IAAAA,MAAM,EAAE,gBAACJ,EAAD;AAAA,aAAQA,EAAR;AAAA;AAJC,GAAX;AAOA,MAAMK,KAAK,GAAG,IAAIhB,UAAJ,CAAe;AAC3BgB,IAAAA,KAAK,EAAE,CAACR,SAAD,EAAYS,MAAZ,CAAmBP,OAAO,CAACQ,IAAR,IAAgBR,OAAO,CAACQ,IAAR,CAAaF,KAA7B,GAAqCN,OAAO,CAACQ,IAAR,CAAaF,KAAlD,GAA0D,EAA7E,CADoB;AAE3BG,IAAAA,QAAQ,EAAET,OAAO,CAACQ,IAAR,IAAgBR,OAAO,CAACQ,IAAR,CAAaC;AAFZ,GAAf,CAAd;AAIA,MAAMC,MAAM,GAAG,IAAItB,WAAJ,CAAgB;AAC7BsB,IAAAA,MAAM,EAAE,CAACnB,KAAD,EAAQC,OAAR,EAAiBC,GAAjB,EAAsBC,IAAtB,EAA4BO,EAA5B,EAAgCM,MAAhC,CAAuC,kBAAAP,OAAO,CAACQ,IAAR,gEAAcE,MAAd,KAAwB,EAA/D,CADqB;AAE7BC,IAAAA,SAAS,EAAEX,OAAO,CAACQ,IAAR,IAAgBR,OAAO,CAACQ,IAAR,CAAaG;AAFX,GAAhB,CAAf;AAIA,MAAMC,OAAO,GAAG,IAAIvB,WAAJ,CAAgB;AAC9BuB,IAAAA,OAAO,EAAE,CAACjB,MAAD,EAASC,MAAT,EAAiBC,QAAjB,EAA2BU,MAA3B,CAAkCP,OAAO,CAACQ,IAAR,IAAgBR,OAAO,CAACQ,IAAR,CAAaI,OAA7B,GAAuCZ,OAAO,CAACQ,IAAR,CAAaI,OAApD,GAA8D,EAAhG,CADqB;AAE9BC,IAAAA,UAAU,EAAEb,OAAO,CAACQ,IAAR,IAAgBR,OAAO,CAACQ,IAAR,CAAaK;AAFX,GAAhB,CAAhB;AAKA;;AACA,MAAMC,MAAM,GAAG;AACbC,IAAAA,GAAG,EAAEhC,OAAO,CAAC,OAAD,CAAP,CAAiBiB,OAAjB,CADQ;AAEbgB,IAAAA,MAAM,EAAEjC,OAAO,CAAC,WAAD,CAAP,CAAqBiB,OAArB,CAFK;AAGbiB,IAAAA,OAAO,EAAElC,OAAO,CAAC,WAAD,CAAP,CAAqBiB,OAArB,CAHI;AAIbkB,IAAAA,KAAK,EAAEnC,OAAO,CAAC,SAAD,CAAP,CAAmBiB,OAAnB,CAJM;AAKbmB,IAAAA,SAAS,EAAEpC,OAAO,CAAC,aAAD,CAAP,CAAuBiB,OAAvB,CALE;AAMboB,IAAAA,GAAG,EAAErC,OAAO,CAAC,OAAD,CAAP,CAAiBiB,OAAjB,CANQ;AAObqB,IAAAA,QAAQ,EAAEtC,OAAO,CAAC,YAAD,CAAP,CAAsBiB,OAAtB,CAPG;AAQbsB,IAAAA,MAAM,EAAEvC,OAAO,CAAC,UAAD,CAAP,CAAoBiB,OAApB,CARK;AASbuB,IAAAA,GAAG,EAAExC,OAAO,CAAC,OAAD,CAAP,CAAiB2B,MAAjB,EAAyBV,OAAzB,CATQ;AAUbwB,IAAAA,GAAG,EAAEzC,OAAO,CAAC,OAAD,CAAP,CAAiBiB,OAAjB,CAVQ;AAWbyB,IAAAA,IAAI,EAAE1C,OAAO,CAAC,QAAD,CAAP,CAAkBiB,OAAlB,CAXO;AAYb0B,IAAAA,GAAG,EAAE3C,OAAO,CAAC,OAAD,CAAP,CAAiBiB,OAAjB,CAZQ;AAab2B,IAAAA,KAAK,EAAE5C,OAAO,CAAC,SAAD,CAAP,CAAmBiB,OAAnB,CAbM;AAcb4B,IAAAA,GAAG,EAAE7C,OAAO,CAAC,OAAD,CAAP,CAAiBiB,OAAjB,CAdQ;AAeb6B,IAAAA,iBAAiB,EAAE9C,OAAO,CAAC,uBAAD,CAAP,CAAiCiB,OAAjC,CAfN;AAgBbC,IAAAA,EAAE,EAAElB,OAAO,CAAC,MAAD,CAAP,CAAgBiB,OAAhB,CAhBS;AAiBb8B,IAAAA,QAAQ,EAAE/C,OAAO,CAAC,aAAD,CAAP,CAAuBiB,OAAvB,CAjBG;AAkBb+B,IAAAA,GAAG,EAAEhD,OAAO,CAAC,OAAD,CAAP,CAAiBiB,OAAjB,CAlBQ;AAmBbgC,IAAAA,GAAG,EAAEjD,OAAO,CAAC,OAAD,CAAP,CAAiBiB,OAAjB,CAnBQ;AAoBbiC,IAAAA,EAAE,EAAElD,OAAO,CAAC,MAAD,CAAP,CAAgBiB,OAAhB,CApBS;AAqBbkC,IAAAA,KAAK,EAAEnD,OAAO,CAAC,SAAD,CAAP,CAAmBiB,OAAnB,CArBM;AAsBbE,IAAAA,IAAI,EAAEnB,OAAO,CAAC,QAAD,CAAP,CAAkBiB,OAAlB,CAtBO;AAuBbmC,IAAAA,MAAM,EAAEpD,OAAO,CAAC,UAAD,CAAP,CAAoB2B,MAApB,EAA4BV,OAA5B,CAvBK;AAwBboC,IAAAA,GAAG,EAAErD,OAAO,CAAC,OAAD,CAAP,CAAiBiB,OAAjB,CAxBQ;AAyBbqC,IAAAA,IAAI,EAAEtD,OAAO,CAAC,QAAD,CAAP,CAAkBiB,OAAlB,CAzBO;AA0BbsC,IAAAA,MAAM,EAAEvD,OAAO,CAAC,UAAD,CAAP,CAAoBiB,OAApB,CA1BK;AA2BbuC,IAAAA,IAAI,EAAExD,OAAO,CAAC,QAAD,CAAP,CAAkBiB,OAAlB,CA3BO;AA4BbwC,IAAAA,IAAI,EAAEzD,OAAO,CAAC,QAAD,CAAP,CAAkBiB,OAAlB,CA5BO;AA6BbyC,IAAAA,OAAO,EAAE1D,OAAO,CAAC,WAAD,CAAP,CAAqBiB,OAArB,CA7BI;AA8Bb0C,IAAAA,KAAK,EAAE3D,OAAO,CAAC,SAAD,CAAP,CAAmBiB,OAAnB,CA9BM;AA+Bb2C,IAAAA,KAAK,EAAE5D,OAAO,CAAC,SAAD,CAAP,CAAmBiB,OAAnB,CA/BM;AAgCb4C,IAAAA,IAAI,EAAE7D,OAAO,CAAC,QAAD,CAAP,CAAkBiB,OAAlB,CAhCO;AAiCb6C,IAAAA,KAAK,EAAE9D,OAAO,CAAC,SAAD,CAAP,CAAmBiB,OAAnB,CAjCM;AAkCb8C,IAAAA,OAAO,EAAE/D,OAAO,CAAC,WAAD,CAAP,CAAqBiB,OAArB,CAlCI;AAmCbM,IAAAA,KAAK,EAALA,KAnCa;AAoCbI,IAAAA,MAAM,EAANA,MApCa;AAqCbE,IAAAA,OAAO,EAAPA;AArCa,GAAf;AAwCA,SAAOE,MAAP;AACD;;AAEDiC,MAAM,CAACC,OAAP,GAAiB;AACfjD,EAAAA,MAAM,EAANA,MADe;AAEff,EAAAA,GAAG,EAAHA,GAFe;AAGfC,EAAAA,SAAS,EAATA,SAHe;AAIfC,EAAAA,UAAU,EAAVA,UAJe;AAKfC,EAAAA,SAAS,EAATA;AALe,CAAjB","sourcesContent":["'use strict'\n/* eslint-env browser */\n\nconst { CID } = require('multiformats/cid')\nconst { multiaddr } = require('multiaddr')\nconst globSource = require('ipfs-utils/src/files/glob-source')\nconst urlSource = require('ipfs-utils/src/files/url-source')\nconst Multicodecs = require('ipfs-core-utils/src/multicodecs')\nconst Multihashes = require('ipfs-core-utils/src/multihashes')\nconst Multibases = require('ipfs-core-utils/src/multibases')\nconst dagPb = require('@ipld/dag-pb')\nconst dagCbor = require('@ipld/dag-cbor')\nconst raw = require('multiformats/codecs/raw')\nconst json = require('multiformats/codecs/json')\nconst { sha256, sha512 } = require('multiformats/hashes/sha2')\nconst { identity } = require('multiformats/hashes/identity')\nconst { base58btc } = require('multiformats/bases/base58')\n\n/**\n * @typedef {import('./types').EndpointConfig} EndpointConfig\n * @typedef {import('./types').Options} Options\n * @typedef {import('multiformats/codecs/interface').BlockCodec<any, any>} BlockCodec\n * @typedef {import('./types').IPFSHTTPClient} IPFSHTTPClient\n */\n\n/**\n * @param {Options} options\n */\nfunction create (options = {}) {\n  /**\n   * @type {BlockCodec}\n   */\n  const id = {\n    name: identity.name,\n    code: identity.code,\n    encode: (id) => id,\n    decode: (id) => id\n  }\n\n  const bases = new Multibases({\n    bases: [base58btc].concat(options.ipld && options.ipld.bases ? options.ipld.bases : []),\n    loadBase: options.ipld && options.ipld.loadBase\n  })\n  const codecs = new Multicodecs({\n    codecs: [dagPb, dagCbor, raw, json, id].concat(options.ipld?.codecs || []),\n    loadCodec: options.ipld && options.ipld.loadCodec\n  })\n  const hashers = new Multihashes({\n    hashers: [sha256, sha512, identity].concat(options.ipld && options.ipld.hashers ? options.ipld.hashers : []),\n    loadHasher: options.ipld && options.ipld.loadHasher\n  })\n\n  /** @type {IPFSHTTPClient} */\n  const client = {\n    add: require('./add')(options),\n    addAll: require('./add-all')(options),\n    bitswap: require('./bitswap')(options),\n    block: require('./block')(options),\n    bootstrap: require('./bootstrap')(options),\n    cat: require('./cat')(options),\n    commands: require('./commands')(options),\n    config: require('./config')(options),\n    dag: require('./dag')(codecs, options),\n    dht: require('./dht')(options),\n    diag: require('./diag')(options),\n    dns: require('./dns')(options),\n    files: require('./files')(options),\n    get: require('./get')(options),\n    getEndpointConfig: require('./get-endpoint-config')(options),\n    id: require('./id')(options),\n    isOnline: require('./is-online')(options),\n    key: require('./key')(options),\n    log: require('./log')(options),\n    ls: require('./ls')(options),\n    mount: require('./mount')(options),\n    name: require('./name')(options),\n    object: require('./object')(codecs, options),\n    pin: require('./pin')(options),\n    ping: require('./ping')(options),\n    pubsub: require('./pubsub')(options),\n    refs: require('./refs')(options),\n    repo: require('./repo')(options),\n    resolve: require('./resolve')(options),\n    start: require('./start')(options),\n    stats: require('./stats')(options),\n    stop: require('./stop')(options),\n    swarm: require('./swarm')(options),\n    version: require('./version')(options),\n    bases,\n    codecs,\n    hashers\n  }\n\n  return client\n}\n\nmodule.exports = {\n  create,\n  CID,\n  multiaddr,\n  globSource,\n  urlSource\n}\n"]},"metadata":{},"sourceType":"script"}