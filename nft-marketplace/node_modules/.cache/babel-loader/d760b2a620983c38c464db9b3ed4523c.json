{"ast":null,"code":"'use strict'; // Import browser version otherwise electron-renderer will end up with node\n// version and fail.\n\nvar _regeneratorRuntime = require(\"C:/a/nft-marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncIterator = require(\"C:/a/nft-marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncIterator\");\n\nvar normaliseInput = require('ipfs-core-utils/src/files/normalise-input/index.browser');\n\nvar modeToString = require('./mode-to-string');\n/**\n * @typedef {import('ipfs-core-types/src/utils').ImportCandidateStream} ImportCandidateStream\n * @typedef {import('ipfs-core-types/src/utils').ImportCandidate} ImportCandidate\n */\n\n/**\n * @param {ImportCandidateStream|ImportCandidate} source\n * @param {AbortController} abortController\n * @param {Headers|Record<string, string>} [headers]\n */\n\n\nfunction multipartRequest(source, abortController) {\n  var headers = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n  var parts, formData, index, total, _iteratorAbruptCompletion, _didIteratorError, _iteratorError, _iterator, _step, _step$value, content, path, mode, mtime, fileSuffix, type, fieldName, qs, secs, nsecs, end;\n\n  return _regeneratorRuntime.async(function multipartRequest$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          parts = [];\n          formData = new FormData();\n          index = 0;\n          total = 0; // @ts-ignore wrong input type for normaliseInput\n\n          _iteratorAbruptCompletion = false;\n          _didIteratorError = false;\n          _context.prev = 6;\n          _iterator = _asyncIterator(normaliseInput(source));\n\n        case 8:\n          _context.next = 10;\n          return _regeneratorRuntime.awrap(_iterator.next());\n\n        case 10:\n          if (!(_iteratorAbruptCompletion = !(_step = _context.sent).done)) {\n            _context.next = 36;\n            break;\n          }\n\n          _step$value = _step.value, content = _step$value.content, path = _step$value.path, mode = _step$value.mode, mtime = _step$value.mtime;\n          fileSuffix = '';\n          type = content ? 'file' : 'dir';\n\n          if (index > 0) {\n            fileSuffix = \"-\".concat(index);\n          }\n\n          fieldName = type + fileSuffix;\n          qs = [];\n\n          if (mode !== null && mode !== undefined) {\n            qs.push(\"mode=\".concat(modeToString(mode)));\n          }\n\n          if (mtime != null) {\n            secs = mtime.secs, nsecs = mtime.nsecs;\n            qs.push(\"mtime=\".concat(secs));\n\n            if (nsecs != null) {\n              qs.push(\"mtime-nsecs=\".concat(nsecs));\n            }\n          }\n\n          if (qs.length) {\n            fieldName = \"\".concat(fieldName, \"?\").concat(qs.join('&'));\n          }\n\n          if (!content) {\n            _context.next = 27;\n            break;\n          }\n\n          formData.set(fieldName, content, path != null ? encodeURIComponent(path) : undefined);\n          end = total + content.size;\n          parts.push({\n            name: path,\n            start: total,\n            end: end\n          });\n          total = end;\n          _context.next = 32;\n          break;\n\n        case 27:\n          if (!(path != null)) {\n            _context.next = 31;\n            break;\n          }\n\n          formData.set(fieldName, new File([''], encodeURIComponent(path), {\n            type: 'application/x-directory'\n          }));\n          _context.next = 32;\n          break;\n\n        case 31:\n          throw new Error('path or content or both must be set');\n\n        case 32:\n          index++;\n\n        case 33:\n          _iteratorAbruptCompletion = false;\n          _context.next = 8;\n          break;\n\n        case 36:\n          _context.next = 42;\n          break;\n\n        case 38:\n          _context.prev = 38;\n          _context.t0 = _context[\"catch\"](6);\n          _didIteratorError = true;\n          _iteratorError = _context.t0;\n\n        case 42:\n          _context.prev = 42;\n          _context.prev = 43;\n\n          if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n            _context.next = 47;\n            break;\n          }\n\n          _context.next = 47;\n          return _regeneratorRuntime.awrap(_iterator.return());\n\n        case 47:\n          _context.prev = 47;\n\n          if (!_didIteratorError) {\n            _context.next = 50;\n            break;\n          }\n\n          throw _iteratorError;\n\n        case 50:\n          return _context.finish(47);\n\n        case 51:\n          return _context.finish(42);\n\n        case 52:\n          return _context.abrupt(\"return\", {\n            total: total,\n            parts: parts,\n            headers: headers,\n            body: formData\n          });\n\n        case 53:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[6, 38, 42, 52], [43,, 47, 51]], Promise);\n}\n\nmodule.exports = multipartRequest;","map":{"version":3,"sources":["C:/a/nft-marketplace/node_modules/ipfs-http-client/src/lib/multipart-request.browser.js"],"names":["normaliseInput","require","modeToString","multipartRequest","source","abortController","headers","parts","formData","FormData","index","total","content","path","mode","mtime","fileSuffix","type","fieldName","qs","undefined","push","secs","nsecs","length","join","set","encodeURIComponent","end","size","name","start","File","Error","body","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\n// Import browser version otherwise electron-renderer will end up with node\n// version and fail.\nconst normaliseInput = require('ipfs-core-utils/src/files/normalise-input/index.browser')\nconst modeToString = require('./mode-to-string')\n\n/**\n * @typedef {import('ipfs-core-types/src/utils').ImportCandidateStream} ImportCandidateStream\n * @typedef {import('ipfs-core-types/src/utils').ImportCandidate} ImportCandidate\n */\n\n/**\n * @param {ImportCandidateStream|ImportCandidate} source\n * @param {AbortController} abortController\n * @param {Headers|Record<string, string>} [headers]\n */\nasync function multipartRequest (source, abortController, headers = {}) {\n  const parts = []\n  const formData = new FormData()\n  let index = 0\n  let total = 0\n\n  // @ts-ignore wrong input type for normaliseInput\n  for await (const { content, path, mode, mtime } of normaliseInput(source)) {\n    let fileSuffix = ''\n    const type = content ? 'file' : 'dir'\n\n    if (index > 0) {\n      fileSuffix = `-${index}`\n    }\n\n    let fieldName = type + fileSuffix\n    const qs = []\n\n    if (mode !== null && mode !== undefined) {\n      qs.push(`mode=${modeToString(mode)}`)\n    }\n\n    if ((mtime) != null) {\n      const { secs, nsecs } = (mtime)\n\n      qs.push(`mtime=${secs}`)\n\n      if (nsecs != null) {\n        qs.push(`mtime-nsecs=${nsecs}`)\n      }\n    }\n\n    if (qs.length) {\n      fieldName = `${fieldName}?${qs.join('&')}`\n    }\n\n    if (content) {\n      formData.set(fieldName, content, path != null ? encodeURIComponent(path) : undefined)\n      const end = total + content.size\n      parts.push({ name: path, start: total, end })\n      total = end\n    } else if (path != null) {\n      formData.set(fieldName, new File([''], encodeURIComponent(path), { type: 'application/x-directory' }))\n    } else {\n      throw new Error('path or content or both must be set')\n    }\n\n    index++\n  }\n\n  return {\n    total,\n    parts,\n    headers,\n    body: formData\n  }\n}\n\nmodule.exports = multipartRequest\n"]},"metadata":{},"sourceType":"script"}