{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/a/nft-marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _createForOfIteratorHelper = require(\"C:/a/nft-marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _objectSpread = require(\"C:/a/nft-marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _awaitAsyncGenerator = require(\"C:/a/nft-marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\");\n\nvar _wrapAsyncGenerator = require(\"C:/a/nft-marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\");\n\nvar _asyncIterator = require(\"C:/a/nft-marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncIterator\");\n\nvar _require = require('multiformats/cid'),\n    CID = _require.CID;\n\nvar toCamelWithMetadata = require('../lib/object-to-camel-with-metadata');\n\nvar configure = require('../lib/configure');\n\nvar toUrlSearchParams = require('../lib/to-url-search-params');\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/files').API<HTTPClientExtraOptions>} FilesAPI\n */\n\n\nmodule.exports = configure(function (api) {\n  /**\n   * @type {FilesAPI[\"ls\"]}\n   */\n  function ls(_x) {\n    return _ls.apply(this, arguments);\n  }\n\n  function _ls() {\n    _ls = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(path) {\n      var options,\n          res,\n          _iteratorAbruptCompletion,\n          _didIteratorError,\n          _iteratorError,\n          _iterator,\n          _step,\n          result,\n          _iterator2,\n          _step2,\n          entry,\n          _args = arguments;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n\n              if (path) {\n                _context.next = 3;\n                break;\n              }\n\n              throw new Error('ipfs.files.ls requires a path');\n\n            case 3:\n              _context.next = 5;\n              return _awaitAsyncGenerator(api.post('files/ls', {\n                timeout: options.timeout,\n                signal: options.signal,\n                searchParams: toUrlSearchParams(_objectSpread(_objectSpread({\n                  arg: path instanceof CID ? \"/ipfs/\".concat(path) : path,\n                  // default long to true, diverges from go-ipfs where its false by default\n                  long: true\n                }, options), {}, {\n                  stream: true\n                })),\n                headers: options.headers\n              }));\n\n            case 5:\n              res = _context.sent;\n              _iteratorAbruptCompletion = false;\n              _didIteratorError = false;\n              _context.prev = 8;\n              _iterator = _asyncIterator(res.ndjson());\n\n            case 10:\n              _context.next = 12;\n              return _awaitAsyncGenerator(_iterator.next());\n\n            case 12:\n              if (!(_iteratorAbruptCompletion = !(_step = _context.sent).done)) {\n                _context.next = 39;\n                break;\n              }\n\n              result = _step.value;\n\n              if (!('Entries' in result)) {\n                _context.next = 34;\n                break;\n              }\n\n              _iterator2 = _createForOfIteratorHelper(result.Entries || []);\n              _context.prev = 16;\n\n              _iterator2.s();\n\n            case 18:\n              if ((_step2 = _iterator2.n()).done) {\n                _context.next = 24;\n                break;\n              }\n\n              entry = _step2.value;\n              _context.next = 22;\n              return toCoreInterface(toCamelWithMetadata(entry));\n\n            case 22:\n              _context.next = 18;\n              break;\n\n            case 24:\n              _context.next = 29;\n              break;\n\n            case 26:\n              _context.prev = 26;\n              _context.t0 = _context[\"catch\"](16);\n\n              _iterator2.e(_context.t0);\n\n            case 29:\n              _context.prev = 29;\n\n              _iterator2.f();\n\n              return _context.finish(29);\n\n            case 32:\n              _context.next = 36;\n              break;\n\n            case 34:\n              _context.next = 36;\n              return toCoreInterface(toCamelWithMetadata(result));\n\n            case 36:\n              _iteratorAbruptCompletion = false;\n              _context.next = 10;\n              break;\n\n            case 39:\n              _context.next = 45;\n              break;\n\n            case 41:\n              _context.prev = 41;\n              _context.t1 = _context[\"catch\"](8);\n              _didIteratorError = true;\n              _iteratorError = _context.t1;\n\n            case 45:\n              _context.prev = 45;\n              _context.prev = 46;\n\n              if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n                _context.next = 50;\n                break;\n              }\n\n              _context.next = 50;\n              return _awaitAsyncGenerator(_iterator.return());\n\n            case 50:\n              _context.prev = 50;\n\n              if (!_didIteratorError) {\n                _context.next = 53;\n                break;\n              }\n\n              throw _iteratorError;\n\n            case 53:\n              return _context.finish(50);\n\n            case 54:\n              return _context.finish(45);\n\n            case 55:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[8, 41, 45, 55], [16, 26, 29, 32], [46,, 50, 54]]);\n    }));\n    return _ls.apply(this, arguments);\n  }\n\n  return ls;\n});\n/**\n * @param {*} entry\n */\n\nfunction toCoreInterface(entry) {\n  if (entry.hash) {\n    entry.cid = CID.parse(entry.hash);\n  }\n\n  delete entry.hash;\n  entry.type = entry.type === 1 ? 'directory' : 'file';\n  return entry;\n}","map":{"version":3,"sources":["C:/a/nft-marketplace/node_modules/ipfs-http-client/src/files/ls.js"],"names":["require","CID","toCamelWithMetadata","configure","toUrlSearchParams","module","exports","api","ls","path","options","Error","post","timeout","signal","searchParams","arg","long","stream","headers","res","ndjson","result","Entries","entry","toCoreInterface","hash","cid","parse","type"],"mappings":"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","sourcesContent":["'use strict'\n\nconst { CID } = require('multiformats/cid')\nconst toCamelWithMetadata = require('../lib/object-to-camel-with-metadata')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/files').API<HTTPClientExtraOptions>} FilesAPI\n */\nmodule.exports = configure(api => {\n  /**\n   * @type {FilesAPI[\"ls\"]}\n   */\n  async function * ls (path, options = {}) {\n    if (!path) {\n      throw new Error('ipfs.files.ls requires a path')\n    }\n\n    const res = await api.post('files/ls', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: path instanceof CID ? `/ipfs/${path}` : path,\n        // default long to true, diverges from go-ipfs where its false by default\n        long: true,\n        ...options,\n        stream: true\n      }),\n      headers: options.headers\n    })\n\n    for await (const result of res.ndjson()) {\n      // go-ipfs does not yet support the \"stream\" option\n      if ('Entries' in result) {\n        for (const entry of result.Entries || []) {\n          yield toCoreInterface(toCamelWithMetadata(entry))\n        }\n      } else {\n        yield toCoreInterface(toCamelWithMetadata(result))\n      }\n    }\n  }\n  return ls\n})\n\n/**\n * @param {*} entry\n */\nfunction toCoreInterface (entry) {\n  if (entry.hash) {\n    entry.cid = CID.parse(entry.hash)\n  }\n\n  delete entry.hash\n\n  entry.type = entry.type === 1 ? 'directory' : 'file'\n\n  return entry\n}\n"]},"metadata":{},"sourceType":"script"}