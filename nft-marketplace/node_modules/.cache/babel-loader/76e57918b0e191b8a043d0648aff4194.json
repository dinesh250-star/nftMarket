{"ast":null,"code":"import _regeneratorRuntime from \"C:/a/nft-marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"C:/a/nft-marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"C:/a/nft-marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _toConsumableArray from \"C:/a/nft-marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\n\nvar _jsxFileName = \"C:\\\\a\\\\nft-marketplace\\\\src\\\\store\\\\CollectionProvider.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport { useReducer } from \"react\";\nimport CollectionContext from \"./collection-context\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar defaultCollectionState = {\n  contract: null,\n  totalSupply: null,\n  collection: [],\n  nftIsLoading: true\n};\n\nvar collectionReducer = function collectionReducer(state, action) {\n  if (action.type === \"CONTRACT\") {\n    return {\n      contract: action.contract,\n      totalSupply: state.totalSupply,\n      collection: state.collection,\n      nftIsLoading: state.nftIsLoading\n    };\n  }\n\n  if (action.type === \"LOADSUPPLY\") {\n    return {\n      contract: state.contract,\n      totalSupply: action.totalSupply,\n      collection: state.collection,\n      nftIsLoading: state.nftIsLoading\n    };\n  }\n\n  if (action.type === \"LOADCOLLECTION\") {\n    return {\n      contract: state.contract,\n      totalSupply: state.totalSupply,\n      collection: action.collection,\n      nftIsLoading: state.nftIsLoading\n    };\n  }\n\n  if (action.type === \"UPDATECOLLECTION\") {\n    var index = state.collection.findIndex(function (NFT) {\n      return NFT.id === parseInt(action.NFT.id);\n    });\n    var collection = [];\n\n    if (index === -1) {\n      collection = [action.NFT].concat(_toConsumableArray(state.collection));\n    } else {\n      collection = _toConsumableArray(state.collection);\n    }\n\n    return {\n      contract: state.contract,\n      totalSupply: state.totalSupply,\n      collection: collection,\n      nftIsLoading: state.nftIsLoading\n    };\n  }\n\n  if (action.type === \"UPDATEOWNER\") {\n    var _index = state.collection.findIndex(function (NFT) {\n      return NFT.id === parseInt(action.id);\n    });\n\n    var _collection = _toConsumableArray(state.collection);\n\n    _collection[_index].owner = action.newOwner;\n    return {\n      contract: state.contract,\n      totalSupply: state.totalSupply,\n      collection: _collection,\n      nftIsLoading: state.nftIsLoading\n    };\n  }\n\n  if (action.type === \"LOADING\") {\n    return {\n      contract: state.contract,\n      totalSupply: state.totalSupply,\n      collection: state.collection,\n      nftIsLoading: action.loading\n    };\n  }\n\n  return defaultCollectionState;\n};\n\nvar CollectionProvider = function CollectionProvider(props) {\n  _s();\n\n  var _useReducer = useReducer(collectionReducer, defaultCollectionState),\n      _useReducer2 = _slicedToArray(_useReducer, 2),\n      CollectionState = _useReducer2[0],\n      dispatchCollectionAction = _useReducer2[1];\n\n  var loadContractHandler = function loadContractHandler(web3, NFTCollection, deployedNetwork) {\n    var contract = deployedNetwork ? new web3.eth.Contract(NFTCollection.abi, deployedNetwork.address) : \"\";\n    dispatchCollectionAction({\n      type: \"CONTRACT\",\n      contract: contract\n    });\n    return contract;\n  };\n\n  var loadTotalSupplyHandler = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(contract) {\n      var totalSupply;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return contract.methods.totalSupply().call();\n\n            case 2:\n              totalSupply = _context.sent;\n              dispatchCollectionAction({\n                type: \"LOADSUPPLY\",\n                totalSupply: totalSupply\n              });\n              return _context.abrupt(\"return\", totalSupply);\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function loadTotalSupplyHandler(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var loadCollectionHandler = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(contract, totalSupply) {\n      var collection, i, hash, response, metadata, owner;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              collection = [];\n              i = 0;\n\n            case 2:\n              if (!(i < totalSupply)) {\n                _context2.next = 27;\n                break;\n              }\n\n              _context2.next = 5;\n              return contract.methods.tokenURIs(i).call();\n\n            case 5:\n              hash = _context2.sent;\n              _context2.prev = 6;\n              _context2.next = 9;\n              return fetch(\"https://ipfs.infura.io/ipfs/\".concat(hash, \"?clear\"));\n\n            case 9:\n              response = _context2.sent;\n\n              if (response.ok) {\n                _context2.next = 12;\n                break;\n              }\n\n              throw new Error(\"Something went wrong\");\n\n            case 12:\n              _context2.next = 14;\n              return response.json();\n\n            case 14:\n              metadata = _context2.sent;\n              _context2.next = 17;\n              return contract.methods.ownerOf(i + 1).call();\n\n            case 17:\n              owner = _context2.sent;\n              collection = [{\n                id: i + 1,\n                title: metadata.properties.name.description,\n                img: metadata.properties.image.description,\n                owner: owner\n              }].concat(_toConsumableArray(collection));\n              _context2.next = 24;\n              break;\n\n            case 21:\n              _context2.prev = 21;\n              _context2.t0 = _context2[\"catch\"](6);\n              console.error(\"Something went wrong\");\n\n            case 24:\n              i++;\n              _context2.next = 2;\n              break;\n\n            case 27:\n              dispatchCollectionAction({\n                type: \"LOADCOLLECTION\",\n                collection: collection\n              });\n\n            case 28:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[6, 21]]);\n    }));\n\n    return function loadCollectionHandler(_x2, _x3) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var updateCollectionHandler = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(contract, id, owner) {\n      var NFT, hash, response, metadata;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return contract.methods.tokenURI(id).call();\n\n            case 2:\n              hash = _context3.sent;\n              _context3.prev = 3;\n              _context3.next = 6;\n              return fetch(\"https://ipfs.infura.io/ipfs/\".concat(hash, \"?clear\"));\n\n            case 6:\n              response = _context3.sent;\n\n              if (response.ok) {\n                _context3.next = 9;\n                break;\n              }\n\n              throw new Error(\"Something went wrong\");\n\n            case 9:\n              _context3.next = 11;\n              return response.json();\n\n            case 11:\n              metadata = _context3.sent;\n              NFT = {\n                id: parseInt(id),\n                title: metadata.properties.name.description,\n                img: metadata.properties.image.description,\n                owner: owner\n              };\n              _context3.next = 18;\n              break;\n\n            case 15:\n              _context3.prev = 15;\n              _context3.t0 = _context3[\"catch\"](3);\n              console.error(\"Something went wrong\");\n\n            case 18:\n              dispatchCollectionAction({\n                type: \"UPDATECOLLECTION\",\n                NFT: NFT\n              });\n\n            case 19:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, null, [[3, 15]]);\n    }));\n\n    return function updateCollectionHandler(_x4, _x5, _x6) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  var updateOwnerHandler = function updateOwnerHandler(id, newOwner) {\n    dispatchCollectionAction({\n      type: \"UPDATEOWNER\",\n      id: id,\n      newOwner: newOwner\n    });\n  };\n\n  var setNftIsLoadingHandler = function setNftIsLoadingHandler(loading) {\n    dispatchCollectionAction({\n      type: \"LOADING\",\n      loading: loading\n    });\n  };\n\n  var collectionContext = {\n    contract: CollectionState.contract,\n    totalSupply: CollectionState.totalSupply,\n    collection: CollectionState.collection,\n    nftIsLoading: CollectionState.nftIsLoading,\n    loadContract: loadContractHandler,\n    loadTotalSupply: loadTotalSupplyHandler,\n    loadCollection: loadCollectionHandler,\n    updateCollection: updateCollectionHandler,\n    updateOwner: updateOwnerHandler,\n    setNftIsLoading: setNftIsLoadingHandler\n  };\n  return /*#__PURE__*/_jsxDEV(CollectionContext.Provider, {\n    value: collectionContext,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 191,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(CollectionProvider, \"ZbRmD8kAHPzijQQn9Hqowc3SWuI=\");\n\n_c = CollectionProvider;\nexport default CollectionProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"CollectionProvider\");","map":{"version":3,"sources":["C:/a/nft-marketplace/src/store/CollectionProvider.js"],"names":["useReducer","CollectionContext","defaultCollectionState","contract","totalSupply","collection","nftIsLoading","collectionReducer","state","action","type","index","findIndex","NFT","id","parseInt","owner","newOwner","loading","CollectionProvider","props","CollectionState","dispatchCollectionAction","loadContractHandler","web3","NFTCollection","deployedNetwork","eth","Contract","abi","address","loadTotalSupplyHandler","methods","call","loadCollectionHandler","i","tokenURIs","hash","fetch","response","ok","Error","json","metadata","ownerOf","title","properties","name","description","img","image","console","error","updateCollectionHandler","tokenURI","updateOwnerHandler","setNftIsLoadingHandler","collectionContext","loadContract","loadTotalSupply","loadCollection","updateCollection","updateOwner","setNftIsLoading","children"],"mappings":"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","sourcesContent":["import { useReducer } from \"react\";\r\n\r\nimport CollectionContext from \"./collection-context\";\r\n\r\nconst defaultCollectionState = {\r\n  contract: null,\r\n  totalSupply: null,\r\n  collection: [],\r\n  nftIsLoading: true,\r\n};\r\n\r\nconst collectionReducer = (state, action) => {\r\n  if (action.type === \"CONTRACT\") {\r\n    return {\r\n      contract: action.contract,\r\n      totalSupply: state.totalSupply,\r\n      collection: state.collection,\r\n      nftIsLoading: state.nftIsLoading,\r\n    };\r\n  }\r\n\r\n  if (action.type === \"LOADSUPPLY\") {\r\n    return {\r\n      contract: state.contract,\r\n      totalSupply: action.totalSupply,\r\n      collection: state.collection,\r\n      nftIsLoading: state.nftIsLoading,\r\n    };\r\n  }\r\n\r\n  if (action.type === \"LOADCOLLECTION\") {\r\n    return {\r\n      contract: state.contract,\r\n      totalSupply: state.totalSupply,\r\n      collection: action.collection,\r\n      nftIsLoading: state.nftIsLoading,\r\n    };\r\n  }\r\n\r\n  if (action.type === \"UPDATECOLLECTION\") {\r\n    const index = state.collection.findIndex(\r\n      (NFT) => NFT.id === parseInt(action.NFT.id)\r\n    );\r\n    let collection = [];\r\n\r\n    if (index === -1) {\r\n      collection = [action.NFT, ...state.collection];\r\n    } else {\r\n      collection = [...state.collection];\r\n    }\r\n\r\n    return {\r\n      contract: state.contract,\r\n      totalSupply: state.totalSupply,\r\n      collection: collection,\r\n      nftIsLoading: state.nftIsLoading,\r\n    };\r\n  }\r\n\r\n  if (action.type === \"UPDATEOWNER\") {\r\n    const index = state.collection.findIndex(\r\n      (NFT) => NFT.id === parseInt(action.id)\r\n    );\r\n    let collection = [...state.collection];\r\n    collection[index].owner = action.newOwner;\r\n\r\n    return {\r\n      contract: state.contract,\r\n      totalSupply: state.totalSupply,\r\n      collection: collection,\r\n      nftIsLoading: state.nftIsLoading,\r\n    };\r\n  }\r\n\r\n  if (action.type === \"LOADING\") {\r\n    return {\r\n      contract: state.contract,\r\n      totalSupply: state.totalSupply,\r\n      collection: state.collection,\r\n      nftIsLoading: action.loading,\r\n    };\r\n  }\r\n\r\n  return defaultCollectionState;\r\n};\r\n\r\nconst CollectionProvider = (props) => {\r\n  const [CollectionState, dispatchCollectionAction] = useReducer(\r\n    collectionReducer,\r\n    defaultCollectionState\r\n  );\r\n\r\n  const loadContractHandler = (web3, NFTCollection, deployedNetwork) => {\r\n    const contract = deployedNetwork\r\n      ? new web3.eth.Contract(NFTCollection.abi, deployedNetwork.address)\r\n      : \"\";\r\n    dispatchCollectionAction({ type: \"CONTRACT\", contract: contract });\r\n    return contract;\r\n  };\r\n\r\n  const loadTotalSupplyHandler = async (contract) => {\r\n    const totalSupply = await contract.methods.totalSupply().call();\r\n    dispatchCollectionAction({ type: \"LOADSUPPLY\", totalSupply: totalSupply });\r\n    return totalSupply;\r\n  };\r\n\r\n  const loadCollectionHandler = async (contract, totalSupply) => {\r\n    let collection = [];\r\n\r\n    for (let i = 0; i < totalSupply; i++) {\r\n      const hash = await contract.methods.tokenURIs(i).call();\r\n      try {\r\n        const response = await fetch(\r\n          `https://ipfs.infura.io/ipfs/${hash}?clear`\r\n        );\r\n        if (!response.ok) {\r\n          throw new Error(\"Something went wrong\");\r\n        }\r\n\r\n        const metadata = await response.json();\r\n        const owner = await contract.methods.ownerOf(i + 1).call();\r\n\r\n        collection = [\r\n          {\r\n            id: i + 1,\r\n            title: metadata.properties.name.description,\r\n            img: metadata.properties.image.description,\r\n            owner: owner,\r\n          },\r\n          ...collection,\r\n        ];\r\n      } catch {\r\n        console.error(\"Something went wrong\");\r\n      }\r\n    }\r\n    dispatchCollectionAction({\r\n      type: \"LOADCOLLECTION\",\r\n      collection: collection,\r\n    });\r\n  };\r\n\r\n  const updateCollectionHandler = async (contract, id, owner) => {\r\n    let NFT;\r\n    const hash = await contract.methods.tokenURI(id).call();\r\n    try {\r\n      const response = await fetch(`https://ipfs.infura.io/ipfs/${hash}?clear`);\r\n      if (!response.ok) {\r\n        throw new Error(\"Something went wrong\");\r\n      }\r\n\r\n      const metadata = await response.json();\r\n\r\n      NFT = {\r\n        id: parseInt(id),\r\n        title: metadata.properties.name.description,\r\n        img: metadata.properties.image.description,\r\n        owner: owner,\r\n      };\r\n    } catch {\r\n      console.error(\"Something went wrong\");\r\n    }\r\n    dispatchCollectionAction({ type: \"UPDATECOLLECTION\", NFT: NFT });\r\n  };\r\n\r\n  const updateOwnerHandler = (id, newOwner) => {\r\n    dispatchCollectionAction({\r\n      type: \"UPDATEOWNER\",\r\n      id: id,\r\n      newOwner: newOwner,\r\n    });\r\n  };\r\n\r\n  const setNftIsLoadingHandler = (loading) => {\r\n    dispatchCollectionAction({ type: \"LOADING\", loading: loading });\r\n  };\r\n\r\n  const collectionContext = {\r\n    contract: CollectionState.contract,\r\n    totalSupply: CollectionState.totalSupply,\r\n    collection: CollectionState.collection,\r\n    nftIsLoading: CollectionState.nftIsLoading,\r\n    loadContract: loadContractHandler,\r\n    loadTotalSupply: loadTotalSupplyHandler,\r\n    loadCollection: loadCollectionHandler,\r\n    updateCollection: updateCollectionHandler,\r\n    updateOwner: updateOwnerHandler,\r\n    setNftIsLoading: setNftIsLoadingHandler,\r\n  };\r\n\r\n  return (\r\n    <CollectionContext.Provider value={collectionContext}>\r\n      {props.children}\r\n    </CollectionContext.Provider>\r\n  );\r\n};\r\n\r\nexport default CollectionProvider;\r\n"]},"metadata":{},"sourceType":"module"}